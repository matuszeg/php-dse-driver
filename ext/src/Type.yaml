---
Dse\Type:
  comment: Cluster object is used to create Sessions.
  methods:
    varchar:
      comment: Get representation of varchar type
      return:
        comment: varchar type
        type: Dse\Type
    text:
      comment: Get representation of text type
      return:
        comment: text type
        type: Dse\Type
    blob:
      comment: Get representation of blob type
      return:
        comment: blob type
        type: Dse\Type
    ascii:
      comment: Get representation of ascii type
      return:
        comment: ascii type
        type: Dse\Type
    bigint:
      comment: Get representation of bigint type
      return:
        comment: bigint type
        type: Dse\Type
    counter:
      comment: Get representation of counter type
      return:
        comment: counter type
        type: Dse\Type
    int:
      comment: Get representation of int type
      return:
        comment: int type
        type: Dse\Type
    varint:
      comment: Get representation of varint type
      return:
        comment: varint type
        type: Dse\Type
    bool:
      comment: Get representation of bool type
      return:
        comment: bool type
        type: Dse\Type
    decimal:
      comment: Get representation of decimal type
      return:
        comment: decimal type
        type: Dse\Type
    double:
      comment: Get representation of double type
      return:
        comment: double type
        type: Dse\Type
    float:
      comment: Get representation of float type
      return:
        comment: float type
        type: Dse\Type
    inet:
      comment: Get representation of inet type
      return:
        comment: inet type
        type: Dse\Type
    timestamp:
      comment: Get representation of timestamp type
      return:
        comment: timestamp type
        type: Dse\Type
    uuid:
      comment: Get representation of uuid type
      return:
        comment: uuid type
        type: Dse\Type
    timeuuid:
      comment: Get representation of timeuuid type
      return:
        comment: timeuuid type
        type: Dse\Type
    smallint:
      comment: Get representation of smallint type
      return:
        comment: smallint type
        type: Dse\Type
    tinyint:
      comment: get representation of tinyint type
      return:
        comment: tinyint type
        type: Dse\Type
    date:
      comment: get representation of date type
      return:
        comment: date type
        type: Dse\Type
    time:
      comment: get representation of time type
      return:
        comment: time type
        type: Dse\Type
    collection:
      comment: |-
        Initialize a Collection type
        @code{.php}
        <?php
        use Dse\Type;

        $collection = Type::collection(Type::int())
                          ->create(1, 2, 3, 4, 5, 6, 7, 8, 9);

        var_dump($collection);
        @endcode
      params:
        type:
          comment: The type of values
          type: Dse\Type
      return:
        comment: '      The collection type'
        type: Type
    map:
      comment: |-
        Initialize a map type
        @code{.php}
        <?php
        use Dse\Type;

        $map = Type::map(Type::int(), Type::varchar())
                   ->create(1, "a", 2, "b", 3, "c", 4, "d", 5, "e", 6, "f")

        var_dump($map);
        @endcode
      params:
        keyType:
          comment: The type of keys
          type: Dse\Type
        valueType:
          comment: The type of values
          type: Dse\Type
      return:
        comment: '            The map type'
        type: Dse\Type
    set:
      comment: |-
        Initialize a set type
        @code{.php}
        <?php
        use Dse\Type;

        $set = Type::set(Type::varchar())
                   ->create("a", "b", "c", "d", "e", "f", "g", "h", "i", "j");

        var_dump($set);
        @endcode
      params:
        type:
          comment: The types of values
          type: Dse\Type
      return:
        comment: ""
        type: mixed
    tuple:
      comment: |-
        Initialize a tuple type
        @code{.php}
        <?php
        use Dse\Type;

        $tuple = Type::tuple(Type::varchar(), Type::int())
                   ->create("a", 123);

        var_dump($tuple);
        @endcode
      params:
        types:
          comment: A variadic list of types
          type: Dse\Type
      return:
        comment: The tuple type
        type: Dse\Type
    userType:
      comment: |-
        Initialize a user type
        @code{.php}
        <?php
        use Dse\Type;

        $userType = Type::userTupe("a", Type::varchar(), "b", Type::int())
                        ->create("a", "abc", "b", 123);

        var_dump($userType);
        @endcode
      params:
        types:
          comment: A variadic list of name/type pairs
          type: Dse\Type
      return:
        comment: The user type
        type: Dse\Type
    name:
      comment: Returns the name of this type as string.
      return:
        comment: Name of this type
        type: string
    __toString:
      comment: Returns string representation of this type.
      return:
        comment: String representation of this type
        type: string
    create:
      comment: |-
        Instantiate a value of this type from provided value(s).

        @throws Exception\InvalidArgumentException when values given cannot be
                                                   represented by this type.
      params:
        values:
          comment: ',... one or more values to coerce into this type'
          type: mixed
      return:
        comment: '           a value of this type'
        type: mixed
...
