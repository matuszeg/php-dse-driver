---
Dse\Session:
  comment: A class that contains and manages connections to DSE. It allows for executing
    or preparing queries for execution.
  methods:
    execute:
      comment: |
        Execute a query.

        @throws Exception
      params:
        statement:
          comment: A statement to be executed.
          type: Dse\Statement
        options:
          comment: Options to control execution of the query.
          type: Dse\ExecutionOptions
      return:
        comment: A colleciton of rows.
        type: Rows
    executeAsync:
      comment: |-
        Execute a query asyncrhonously. This method returns immediately, but
        the query continues execution in the background.
      params:
        statement:
          comment: A statement to be executed.
          type: Dse\Statement
        options:
          comment: Options to control execution of the query.
          type: Dse\ExecutionOptions
      return:
        comment: A future that can be used to retrieve the result.
        type: FutureRows
    prepare:
      comment: |
        Prepare a query for execution.

        @throws Exception
      params:
        cql:
          comment: The query to be prepared.
          type: string
        options:
          comment: Options to control preparing the query.
          type: Dse\ExecutionOptions
      return:
        comment: |
          A prepared statement that can be bound with parameters and executed.
        type: PreparedStatement
    prepareAsync:
      comment: Asynchronously prepare a query for execution.
      params:
        cql:
          comment: The query to be prepared.
          type: string
        options:
          comment: Options to control preparing the query.
          type: Dse\ExecutionOptions
      return:
        comment: A future that can be used to retrieve the prepared statement.
        type: FuturePreparedStatement
    close:
      comment: |
        Close the session and all its connections.

        @throws Exception
      params:
        timeout:
          comment: |
            The amount of time in seconds to wait for the session to close.
          type: double
      return:
        comment: "Nothing."
        type: "null"
    closeAsync:
      comment: Asynchronously close the session and all its connections.
      return:
        comment: A future that can be waited on.
        type: FutureClose
    schema:
      comment: Get a snapshot of the cluster's current schema.
      return:
        comment: A snapshot of the cluster's schema.
        type: Schema
    executeGraph:
      comment:
        Execute graph queries.

        @throws Exception
      params:
        statement:
          comment: A graph statement or query string to be executed.
          type: string|Graph\Statement
        options:
          comment: |
            Options to control execution of the graph query.

            * array["graph_language"]     string       Graph language; default "gremlin-groovy"
            * array["graph_source"]       string       Graph source; default "g". If running
                                                       analytics (OLAP) query then it should
                                                       use "a"
            * array["graph_name"]         string       Graph name
            * array["read_consistency"]   consistency  Read consistency of graph queries;
                                                       default `Dse::CONSISTENCY_ONE`
            * array["write_consistency"]  consistency  Write consistency of graph queries;
                                                       default `Dse::CONSISTENCY_QUORUM`
            * array["request_timeout"]    double|int   Request time of graph queries in
                                                       seconds; default `0` (no timeout)
            * array["timestamp"]          int|string   Either an integer or integer string
                                                       timestamp that represents the number
                                                       of microseconds since the epoch
          type: array
      return:
        comment: A result set.
        type: Graph\ResultSet
    executeGraphAsync:
      comment: Asynchronously execute a graph query.
      params:
        statement:
          comment: A graph statement or query string to be executed.
          type: string|Graph\Statement
        options:
          comment: |
            Options to control execution of the graph query.
            @see Session::executeGraph()
          type: array
      return:
        comment: A future that can be used to retrieve the result set.
        type: Graph\FutureResultSet
...
